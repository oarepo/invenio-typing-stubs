from typing import Any, Dict, Iterator, List, Optional, Type

from invenio_communities.communities.records.api import Community as Community
from invenio_communities.errors import (
    SetDefaultCommunityError as SetDefaultCommunityError,
)

class CommunitiesRelationManager:
    def __init__(
        self, m2m_model_cls: Type[Any], record_id: str, data: Optional[Dict[str, Any]]
    ) -> None: ...
    def add(
        self, community_or_id: Community, request: None = ..., default: bool = False
    ) -> None: ...
    def remove(self, community_or_id: Any) -> None: ...
    def clear(self) -> None: ...
    def refresh(self) -> None: ...
    def __len__(self) -> int: ...
    def __contains__(self, community_or_id: Any) -> bool: ...
    def __iter__(self) -> Iterator[Any]: ...
    def _lookup_community(self, community_id: str) -> Community: ...
    def _to_id(self, val: Optional[Any]) -> str: ...
    @property
    def ids(self) -> List[str]: ...
    @property
    def default(self): ...
    @property
    def entries(self): ...
    def to_dict(self) -> Dict[str, Any]: ...
    def from_dict(
        self, data: Optional[Dict[str, Any]]
    ) -> CommunitiesRelationManager: ...
