from invenio_records.systemfields import SystemFieldContext
from invenio_records.systemfields.base import SystemField

def uuid_or_none(val): ...

class VersionsManager:
    def __init__(self, record, dump=None) -> None: ...
    def copy_to(self, record): ...
    @property
    def model_cls(self): ...
    @property
    def parent_id(self): ...
    @property
    def record_model_cls(self): ...
    @property
    def index(self): ...
    @property
    def latest_id(self): ...
    @property
    def latest_index(self): ...
    @property
    def next_draft_id(self): ...
    @property
    def is_latest(self): ...
    @property
    def is_latest_draft(self): ...
    @property
    def next_index(self): ...
    def state(self, refresh: bool = False): ...
    def set_next(self) -> None: ...
    def clear_next(self) -> None: ...
    def set_latest(self) -> None: ...
    def dump(self): ...
    def load(self, dump) -> None: ...

class VersionsFieldContext(SystemFieldContext):
    @property
    def model_cls(self): ...
    def resolve(self, *, parent_id): ...

class VersionsField(SystemField):
    def __init__(self, create: bool = True, set_next: bool = False, set_latest: bool = False) -> None: ...
    def obj(self, record): ...
    def set_obj(self, record, versions) -> None: ...
    def post_create(self, record) -> None: ...
    def pre_delete(self, record, force: bool = False) -> None: ...
    def pre_dump(self, record, data, dumper=None) -> None: ...
    def post_load(self, record, data, loader=None) -> None: ...
    def __get__(self, record, owner=None): ...
    def __set__(self, record, obj) -> None: ...
