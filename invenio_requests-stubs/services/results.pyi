from typing import Any, List, Optional, Tuple

from _typeshed import Incomplete
from flask_principal import Identity
from invenio_requests.resolvers.registry import ResolverRegistry as ResolverRegistry

class EntityResolverExpandableField:
    entity_proxy: Optional[Incomplete]
    def ghost_record(self, value: Any) -> Any: ...
    def system_record(self) -> Any: ...
    def get_value_service(self, value: Any) -> Tuple[Incomplete, Any]: ...
    def pick(self, identity: Identity, resolved_rec: Any) -> Any: ...

class MultiEntityResolverExpandableField:
    entity_proxies: List[Incomplete]
    def __init__(self, key: str) -> None: ...
    def ghost_record(self, value: Any) -> Any: ...
    def system_record(self) -> List[Any]: ...
    def get_value_service(self, values: List[Any]) -> List[Tuple[Incomplete, Any]]: ...
    def pick(self, identity: Identity, resolved_record: Any) -> Any: ...
    def add_dereferenced_record(
        self, service: Incomplete, value: Any, resolved_rec: Optional[Any]
    ) -> None: ...
    def _get_resolver_type(self, service: Incomplete) -> str: ...
