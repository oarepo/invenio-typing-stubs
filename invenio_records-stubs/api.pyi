from datetime import datetime
from typing import (
    Any,
    Dict,
    List,
    Optional,
    Self,
    Union,
)
from uuid import UUID

from invenio_records.dumpers.search import SearchDumper
from invenio_records.models import RecordMetadata
from jsonref import JsonRef  # type: ignore[import-untyped]
from jsonschema._format import FormatChecker  # type: ignore[import-untyped]

class RecordBase(dict):
    def __init__(self, data: Any, model: Optional[RecordMetadata] = ..., **kwargs): ...
    def _validate(
        self,
        format_checker: Optional[FormatChecker] = ...,
        validator: None = ...,
        use_model: bool = ...,
    ) -> Dict[str, Any]: ...
    def clear_none(self, key: None = ...): ...
    @property
    def created(self) -> Optional[datetime]: ...
    def dumps(self, dumper: Optional[SearchDumper] = ...) -> Dict[str, Any]: ...
    @property
    def id(self) -> Optional[UUID]: ...
    @classmethod
    def loads(
        cls, data: Dict[str, Any], loader: Optional[SearchDumper] = ...
    ) -> Self: ...
    def replace_refs(self) -> Union[Dict[str, int], Dict[str, JsonRef], Self]: ...
    @property
    def revision_id(self) -> Optional[int]: ...
    @property
    def updated(self) -> Optional[datetime]: ...
    def validate(
        self,
        format_checker: Optional[FormatChecker] = ...,
        validator: None = ...,
        **kwargs,
    ): ...

class Record(RecordBase):
    def commit(
        self,
        format_checker: Optional[FormatChecker] = ...,
        validator: None = ...,
        **kwargs,
    ) -> Self: ...
    @classmethod
    def create(
        cls, data: Dict[str, Any], id_: Optional[UUID] = ..., **kwargs
    ) -> Self: ...
    def delete(self, force: bool = ...) -> Self: ...
    @classmethod
    def get_record(cls, id_: Union[UUID, str], with_deleted: bool = ...) -> Self: ...
    @classmethod
    def get_records(cls, ids: List[UUID], with_deleted: bool = ...) -> List[Self]: ...
    def patch(self, patch: List[Dict[str, Union[List[str], str]]]) -> Self: ...
    def revert(self, revision_id: int) -> Self: ...
    @property
    def revisions(self) -> RevisionsIterator: ...
    def undelete(self) -> Self: ...

class RecordRevision(RecordBase):
    def __init__(self, model: RecordMetadata): ...

class RevisionsIterator:
    def __contains__(self, revision_id: int): ...
    def __getitem__(self, revision_id: int) -> RecordRevision: ...
    def __init__(self, model: RecordMetadata): ...
    def __iter__(self) -> Self: ...
    def __len__(self) -> int: ...
    def __next__(self) -> RecordRevision: ...
    def __reversed__(self): ...
