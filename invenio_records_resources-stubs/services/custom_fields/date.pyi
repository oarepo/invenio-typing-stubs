from time import struct_time
from typing import Any, Dict

from invenio_records_resources.records.api import Record
from invenio_records_resources.services.custom_fields.base import BaseListCF
from marshmallow_utils.fields.edtfdatestring import EDTFDateTimeString

class ISODateStringCF(BaseListCF):
    def __init__(self, name: str, **kwargs): ...
    @property
    def mapping(self) -> Dict[str, Any]: ...

class EDTFDateStringCF(BaseListCF):
    def __init__(self, name: str, **kwargs): ...
    @classmethod
    def _calculate_date_range(cls, date: str) -> Any: ...
    @classmethod
    def _format_date(cls, date: struct_time) -> str: ...
    def dump(self, record: Any, cf_key: str = ...): ...
    @property
    def field(self) -> EDTFDateTimeString: ...
    def load(
        self,
        record: Record,
        cf_key: str = ...,
    ): ...
    @property
    def mapping(self) -> Dict[str, Any]: ...
