import abc
from abc import ABC, abstractmethod
from typing import Any

class ResolverRegistryBase(ABC, metaclass=abc.ABCMeta):
    @classmethod
    @abstractmethod
    def get_registered_resolvers(cls) -> list[Any]: ...
    @classmethod
    def resolve_entity_proxy(
        cls, reference_dict: dict[str, Any], raise_: bool = ...
    ) -> Any | None: ...
    @classmethod
    def resolve_entity(
        cls, reference_dict: dict[str, Any], raise_: bool = ...
    ) -> Any | None: ...
    @classmethod
    def resolve_need(
        cls, reference_dict: dict[str, Any], raise_: bool = ..., ctx: Any | None = ...
    ) -> Any | None: ...
    @classmethod
    def reference_entity(
        cls, entity: Any, raise_: bool = ...
    ) -> dict[str, Any] | None: ...
    @classmethod
    def reference_identity(
        cls, identity: Any, raise_: bool = ...
    ) -> dict[str, str]: ...
