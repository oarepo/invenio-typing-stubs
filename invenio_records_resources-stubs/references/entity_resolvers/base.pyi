import abc
from abc import ABC, abstractmethod
from invenio_records_resources.proxies import current_service_registry as current_service_registry

class EntityProxy(ABC, metaclass=abc.ABCMeta):
    def __init__(self, resolver, reference_dict) -> None: ...
    @property
    def reference_dict(self): ...
    def resolve(self): ...
    @abstractmethod
    def get_needs(self, ctx=None): ...
    def get_resolver(self): ...
    @abstractmethod
    def pick_resolved_fields(self, identity, resolved_dict): ...

class EntityResolver(ABC, metaclass=abc.ABCMeta):
    def __init__(self, service_id) -> None: ...
    def get_entity_proxy(self, ref_dict, check: bool = True): ...
    def reference_entity(self, entity, check: bool = True): ...
    @abstractmethod
    def matches_reference_dict(self, ref_dict): ...
    @abstractmethod
    def matches_entity(self, entity): ...
    def get_service(self): ...
