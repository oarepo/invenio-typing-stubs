import abc
from typing import Any, Optional, Sequence

from flask_principal import ActionNeed as ActionNeed
from flask_principal import Identity, Need
from invenio_search.engine import dsl

class Generator:
    def needs(self, **kwargs: Any) -> Sequence[Need]: ...
    def excludes(self, **kwargs: Any) -> Sequence[Need]: ...
    def query_filter(
        self, identity: Optional[Identity], **kwargs: Any
    ) -> dsl.query.Query | None: ...

class AnyUser(Generator): ...
class SystemProcess(Generator): ...
class SystemProcessWithoutSuperUser(SystemProcess): ...
class Disable(Generator): ...
class RecordOwners(Generator): ...
class AnyUserIfPublic(Generator): ...
class AuthenticatedUser(Generator): ...

class AllowedByAccessLevel(Generator):
    ACTION_TO_ACCESS_LEVELS: dict[str, Sequence[str]]
    action: str
    def __init__(self, action: str = "read") -> None: ...

class AdminAction(Generator):
    action: str
    def __init__(self, action: str) -> None: ...

class ConditionalGenerator(Generator, metaclass=abc.ABCMeta):
    then_: Sequence[Generator]
    else_: Sequence[Generator]
    def __init__(
        self, then_: Sequence[Generator], else_: Sequence[Generator]
    ) -> None: ...
    @staticmethod
    def _make_query(generators: Sequence[Generator], **kwargs) -> dsl.query.Query: ...

class IfConfig(ConditionalGenerator):
    accept_values: Sequence[Any]
    config_key: str
    def __init__(
        self, config_key: str, accept_values: Optional[Sequence[Any]] = None, **kwargs
    ) -> None: ...
